import time
import json
import os
import md5
from celery import Celery
from lib.startup_verify_mac import Startup_Scann
from lib.vt_client import vt_Class
from lib.startup import startup_report
from lib.report import report_Class
from lib.filetype import Scan_filetype
from lib.meta_scan import meta_Scan
from lib.string_client import string_Scan
from lib.xor import xor_Scan
from lib.startup_verify_yara import Startup_Sig 
from lib.genarate_report import Gen_Report_Html
from lib.startVM import virtualboxLib
import hashlib
import lib.logfile
import logging
import configparser


logger = logging.getLogger('main')


app = Celery('tasks', backend='amqp', broker='amqp://')

app.conf.update(
        CELERY_RESULT_BACKEND = "amqp",
        CELERY_RESULT_SERIALIZER='json',
        )



@app.task
def static_analysis(filepath="None", md5="None", source_type="None"):
    dlist = False 
    check = True
    
    if md5 != "None":
    	logger.info("Perform MD5 Scanning for file : %s" % md5)
    	file_path = "report/" + md5 + "/" + md5 + ".json"

    	for dirname in os.listdir('report'):
		if md5 == dirname:
			dlist = True
    			logger.info("File Already Scanned file path : %s" % file_path)

    	if dlist:
		with open('report/'+md5+"/"+md5+".json") as config_data:
        		cfg = json.load(config_data)
			status = cfg['Result']
    			logger.info("File Already Scanned MD5 %s status : %s" % (md5, status))
	else:
    		logger.info("Start MD5 Analysis on MD5 : %s" % md5)
    		get_value = Startup_Scann(md5)
    		status = get_value.find_mac()

    	logger.info("Final MD5 %s Analysis status : %s" % (md5, status))
	return status
		

    if filepath != "None":

    	logger.info("Perform MD5 Scanning for file : %s" % filepath)
    	md5 = hashlib.md5(open(filepath).read()).hexdigest()

    	ftype = Scan_filetype(filepath, md5)
    	filetype = ftype.get_filetype()

    	logger.info("Get File Type : %s" % filetype)


    	head, tail = os.path.split(filepath)

    	logger.info("Get File's %s MD5 : %s" % (tail, md5))

    	file_path = "report/" + md5 + "/" + tail

    	for dirname in os.listdir('report'):
		if md5 == dirname:
			dlist = True
    			logger.info("File Already Scanned file path : %s" % file_path)

    	if dlist:
		with open('report/'+md5+"/"+md5+".json") as config_data:
        		cfg = json.load(config_data)
			status = cfg['Result']
    			logger.info("File Already Scanned file %s status : %s" % (tail, status))
			return status
    
    	else:

		final_status = []
    		logger.info("File Analysis Started : %s" % tail)

    		os.system("mkdir report/"+md5)
    		os.system("cp "+ filepath + "  report/"+md5+"/")
		os.system("mv /tmp/%s.ip report/%s/ip.txt" % (tail, md5)) 

    		logger.info("Generate Report for file : %s" % tail)
    		report = startup_report(file_path, md5)
    		report.peframe_scan()

    		logger.info("Start MD5 Analysis on file : %s" % tail)
    		get_value = Startup_Scann(md5)
    		status = get_value.find_mac()

    		logger.info("MD5 Analysis status : %s" % status)
		final_status.append(status)
		if status == "3":
			check = False	

		if check:
			res = vt_Class(filepath, md5)
			status = res.vt_Score()
    			logger.info("Virus Total Scanning Analysis status : %s" % status)
			final_status.append(status)
			if status == "3":
				check = False	

    		if check:
    			yara_check = Startup_Sig(filepath, filetype)
    			status = yara_check.final_scan()
    			logger.info("Yara Scanning Analysis status : %s" % status)
			final_status.append(status)
			if status == "3":
				check = False	

		if check:
			res = xor_Scan(filepath, md5)
			status = res.final_results()
    			logger.info("XOR Scanning Analysis status : %s" % status)
			final_status.append(status)
			if status == "3":
				check = False	

		if check:
			res = string_Scan(filepath, md5)
			status = res.all_scan()
    			#logger.info("String Scanning Analysis status : %s" % status)
			final_status.append(status)
			if status == "3":
				check = False	

		if check:
			res = meta_Scan(filepath, md5)
			status = res.gen_array()
    			#logger.info("Meta Data Scanning Analysis status : %s" % status)
			final_status.append(status)
			if status == "3":
				check = False	

		for status in final_status:
			if status == 3:
				status = 3
				check = False
			if check:
				if status == 2:
					status = 2
					check = False
			if check:
				if status == 1:
					status = 1


		
    		logger.info("Generate Final Report for file : %s with status %s" % (tail, status))
    		gen_report = report_Class(file_path, status, md5)
    		gen_report.gen_Report()

		file_path = "report/%s/" % md5
	
		if status != "3":
			res = virtualboxLib()
        		res.start_process(source_type, tail, filetype, file_path)

		parser = configparser.ConfigParser()
		parser.read('config.cfg')
		server_ip = parser.get('config', 'server_ip')
		server_port = parser.get('config', 'server_port')

		Gen_Report_Html(md5, server_ip, status)

    		logger.info("Final File %s Analysis status : %s" % (tail, status))
		return status


