import socket                   # Import socket module
import re
import time
import socket
import hashlib
import md5
from tasks import static_analysis
from SocketServer import ThreadingMixIn
import time
import subprocess
import os
import commands
import configparser

parser = configparser.ConfigParser()
parser.read('config.cfg')
server_ip = parser.get('config', 'server_ip')
server_port = parser.get('config', 'server_port')
print "server ip %s" % server_ip
print "server port %s" % server_port


port = int(server_port)               # Reserve a port for your service.
s = socket.socket()             # Create a socket object
host = str(server_ip)     # Get local machine name
s.bind((host, port))            # Bind to the port
s.listen(5)                     # Now wait for client connection.

print 'Server listening....'

while True:
    conn, addr = s.accept()     # Establish connection with client.
    print 'Got connection from', addr 
    
    d1 = conn.recv(4)
    print d1
	
    if d1 == "rece":
	source_type = conn.recv(1024)
	conn.send("done")
	size1 = conn.recv(2)
	file_name = conn.recv(int(size1))
	print file_name
    	with open("/tmp/"+file_name, 'wb') as f:
        	print 'file opened'
        	while True:
            		print('receiving data...')
            		data = conn.recv(1024)
            		print('data=%s', (data))
            		if not data:
				print "k"
                		break
            		# write data to a file
            		f.write(data)
    	f.close()

    ip1 = re.findall( r'[0-9]+(?:\.[0-9]+){3}', str(addr))
    for ip in ip1:
    	os.system("echo %s > /tmp/%s.ip" % (ip, file_name))

    md5 = hashlib.md5(open("/tmp/"+file_name).read()).hexdigest()
    print md5
    command = "python celery_client.py /tmp/%s None %s" % (file_name, source_type)
    status, output = commands.getstatusoutput(command)
    print "output %s" %output

    #time.sleep(60)

    conn.send(output)


    if d1 == "send":
	fpath = "report/"+md5+"/"+md5+".json"
    	f = open(fpath,'rb')
    	l = f.read(1024)
    	while (l):
       		conn.send(l)
       		print('Sent ',repr(l))
       		l = f.read(1024)
    	f.close()

    print('Done sending') 
    conn.close()

    if output != "3":
    	os.system("python vol_malware.py %s %s" % (source_type, md5)) 

