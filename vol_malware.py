import os
import sys
import commands
import re
import argparse

class voL_Cmd(object):
	def __init__(self, md5, cmd_name, profile_name):
		self.cmd_name = cmd_name

		if profile_name == "XP":
			self.profile_name = "WinXPSP2x86"
		else:
			self.profile_name = "WinXPSP2x86"

		self.md5 = md5
		self.mem_dmp = "report/%s/mem.dmp" % md5
		self.dump_dir = "report/%s/out/dump" % md5
		self.pdump_dir = "report/%s/out/pdump" % md5
		
	def run_cmd(self):
		tail = ""
		tail_array = []
		if self.cmd_name == "dlldump":
			tail = "--dump-dir %s" % self.dump_dir
			tail_array.append(tail)
			
		if self.cmd_name == "procdump":
			tail = "--dump-dir %s" % self.pdump_dir
			tail_array.append(tail)

		if self.cmd_name == "hivedump":
			os.system("sed -i '1,3d' report/%s/out/hivescan.txt" % self.md5)
			with open("report/%s/out/hivescan.txt" % self.md5) as f:
				tails = f.read().splitlines()
			
			for tail in tails:
				tail_array.append("-o %s" % tail)
		
			
		filew = open("report/%s/out/%s.txt" % (self.md5, self.cmd_name), 'w')

		if not tail:
			cmd = "python vol.py -f %s --profile=%s %s %s" % (self.mem_dmp, self.profile_name, self.cmd_name, tail)
			status, output = commands.getstatusoutput(cmd)
			if status != 0:
				filew.write(cmd)

			if status == 0:
				filew.write(output)
		if tail:
			for tail in tail_array:
				print "tail %s" % tail
				cmd = "python vol.py -f %s --profile=%s %s %s" % (self.mem_dmp, self.profile_name, self.cmd_name, tail)
				print "cmd %s" % cmd
				status, output = commands.getstatusoutput(cmd)
				if status != 0:
					filew.write(cmd)

				if status == 0:
					res = re.search(r'Foundation Volatility Framework 2.5', output)
					if res:
						pass
					if not res:
						filew.write(output)
					

		filew.close()

	
if __name__ == "__main__":

	parser = argparse.ArgumentParser()	
	parser.add_argument("profile", type=str, help="Enter Profile")
	parser.add_argument("md5", type=str, help="Enter Mac Address") 
	args = parser.parse_args()

	if args.profile == "XP":
		list = {"pslist", "pstree", "psscan", "dlllist", "dlldump", "handles", "cmdscan", "procdump", "modscan", "driverscan", "filescan", "connections", "connscan", "sockscan", "netscan", "hivescan", "hivelist", "hivedump", "malfind", "svcscan", "apihooks", "callbacks", "devicetree", "psxview"}
	else:
		list = {"pslist", "pstree", "psscan", "dlllist", "dlldump", "handles", "cmdscan", "procdump", "modscan", "driverscan", "filescan", "connections", "connscan", "sockscan", "netscan", "hivescan", "hivelist", "hivedump", "malfind", "svcscan", "apihooks", "callbacks", "devicetree", "psxview"}

	md5 = args.md5

	dump_dir = "report/%s/out/dump" % md5
	pdump_dir = "report/%s/out/pdump" % md5
	os.system("mkdir report/%s/out" % md5)
	os.system("mkdir %s" % dump_dir)
	os.system("mkdir %s" % pdump_dir)
	for l in list:
		res = voL_Cmd(md5,l,args.profile)
		res.run_cmd()

	os.system("zip -r report/%s/memory_analysis.zip report/%s/out" % (md5, md5))
