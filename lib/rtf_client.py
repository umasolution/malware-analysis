import subprocess
import time
import os
import json
import re
from startup_verify_mac import Startup_Scann
from swf_client import swf_Class
import hashlib

class rtf_Class():

	def __init__(self, filename, md5):
		self.filename = filename
		self.filepath = "report/"+md5+"/"+filename
		self.md5 = md5
		self.reportpath = "report/"+md5+"/"+filename + "_rtf"
		self.rtf_scan()

	def rtf_Score(self):
		self.res = int(subprocess.call(['grep', 'seems to be malicious', self.reportpath]))
		if self.res == 0:
        		self.result = 3
		elif self.res == 1:
        		self.result = 1
		else:
        		self.result = error

		with open(self.reportpath) as f:
			data = f.readlines()
			for line in data:
				s = re.search(r'(OLE_.*\.bin)', line)
				if s:
					docname = s.group(0)
					os.system("mv "+docname+" report/"+self.md5+"/")
					md5_1 = hashlib.md5(open("report/"+self.md5+"/"+docname).read()).hexdigest()
                                        get_value = Startup_Scann(md5_1)
                                        status = get_value.find_mac()
					self.result = 2
                                        if status == 3:
                                                self.result = 3



		with open(self.reportpath) as f:
			data = f.readlines()
			for line in data:
				s = re.search(r'(OBJDATA_.*\.bin)', line)
				if s:
					docname = s.group(0)
					os.system("mv "+docname+" report/"+self.md5+"/")
					md5_1 = hashlib.md5(open("report/"+self.md5+"/"+docname).read()).hexdigest()
                                        get_value = Startup_Scann(md5_1)
                                        status = get_value.find_mac()
					self.result = 2
                                        if status == 3:
                                                self.result = 3


                with open(self.reportpath+"_swf") as f:
                        data = f.readlines()
                        for lines in data:
                                print lines
                                match = re.search(r'(.*MD5: [A-F0-9]+).*',lines)
                                if match:
                                        self.result = 2
                                        data1 = match.group(0).split(' ')[4]
                                        os.system("mv "+data1+ " report/"+self.md5+"/")
                                        md5_1 = hashlib.md5(open("report/"+self.md5+"/"+data1).read()).hexdigest()
                                        get_value = Startup_Scann(md5_1)
                                        status = get_value.find_mac()
                                        if status == 3:
                                                self.result = 3

                                        swf = swf_Class(self.filename, self.md5)
                                        status = swf.swf_Score()
                                        if status == 3:
                                                self.result = 3

		return self.result



	def rtf_scan(self):
		os.system("echo RTF Scanning result for file " + self.filepath + " > "+ self.reportpath )
		os.system("wine tools/rtscanner/RTFScan.exe " + self.filepath + " scan >> "+ self.reportpath)  
                os.system("echo pyxswf.py result for file " + self.filepath + " > "+ self.reportpath+"_swf")
                os.system("python tools/oletools/pyxswf.py -x " + self.filepath + " >> "+ self.reportpath+"_swf")


if __name__ == "__main__":
	res = rtf_Class('rtf2.rtf','31c032f34f1c2561488e898c451e0666')
	result = res.rtf_Score()	
	print result
