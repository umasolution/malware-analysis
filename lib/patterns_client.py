import subprocess
from urlparse import urlparse
import time
import os
import json
import re

class patterns_Class():

	def __init__(self, file_name, md5):
		self.filename = file_name
		self.filepath = "report/"+ md5 +"/"+ file_name
		self.reportpath = "report/"+ md5 +"/"+ file_name +"_pattern.report"
		self.pat_scan()
		self.score = 1

                with open(self.reportpath, 'r') as myfile:
                        self.data=myfile.read().replace('\n', '')

		
                with open('data/ipblock.list', 'r') as myfile:
                        self.iplist=myfile.read().replace('\n', ' ')

                with open('data/urlblock.list', 'r') as myfile:
                        self.urllist=myfile.read().replace('\n', ' ')

                with open('data/emailblock.list', 'r') as myfile:
                        self.emaillist=myfile.read().replace('\n', ' ')

                with open('data/pattern.list') as myfile:
                        self.patternlist=myfile.readlines()

	def check_pattern(self):
                with open(self.reportpath) as rp:
			lines = rp.readlines()
			for line in lines:
				for pat in self.patternlist:
					pat_match = re.findall(r'('+pat+')', line)
					if pat_match:
						self.score = 3
						return self.score

					
		return self.score

	def check_email(self):
		
                emails = re.findall(r'[\w\-][\w\-\.]+@[\w\-][\w\-\.]+[a-zA-Z]{1,4}', self.data)
		
		for email in emails:
			email_search = re.search(r'('+ email +')', self.emaillist)
			if email_search:
				self.score = 3

		return self.score
		

	def check_url(self):

                urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', self.data)

                for url in urls:
                        o = urlparse(url)
                        self.url_full = o.geturl()
                        self.domain = o.netloc

			url_search = re.search(r'('+ self.url_full +')', self.urllist)
			if url_search:
				self.score = 3

			domain_search = re.search(r'('+ self.domain +')', self.urllist)
			if domain_search:
				self.score = 3
	
		return self.score


	def check_ip(self):
		ips = re.findall(r"\d{1,3}(?:\.\d{1,3}){3}", self.data)
		for ip in ips:
			ip_search = re.search(r'('+ ip +')', self.iplist)
			if ip_search:
				self.score = 3

		return self.score

	def get_Score(self):
		check = True
		final_status = []
		self.res1 = self.check_url()
		final_status.append(self.res1)
		self.res2 = self.check_ip()
		final_status.append(self.res2)
		self.res3 = self.check_email()
		final_status.append(self.res3)
		self.res4 = self.check_pattern()
		final_status.append(self.res4)

        	for status in final_status:
                	if status == 3:
                        	status = 3
                        	check = False
                	if check:
                        	if status == 2:
                                	status = 2
                                	check = False
                	if check:
                        	if status == 1:
                                	status = 1


		return status
		

	def pat_scan(self):
		os.system("python tools/balbuzard/balbuzard.py " + self.filepath + " > "+ self.reportpath)


if __name__ == "__main__":
	res = patterns_Class('sample1.doc','31c032f34f1c2561488e898c451e0666')
	status = res.get_Score()
	print status
