import os
import sys
import time
import re
import configparser
import commands
import re
import os.path

class virtualboxLib(object):
	def __init__(self):
		pass	
		self.spath = os.getcwd()

	def valid_ip(self, address):
    		try:
        		socket.inet_aton(address)
        		return True
    		except:
        		return False

	def get_machine_ip(self, vm_name):
		str = "VirtualBox Desktop Integration" 
		cmd = "vboxmanage showvminfo %s" % vm_name
		status, output = commands.getstatusoutput(cmd)
		output1 = output
		data = re.search(r'('+str+')', output)

		while not data:
			time.sleep(5)
			cmd = "VBoxManage guestproperty get "+ vm_name + " \"/VirtualBox/GuestInfo/Net/0/V4/IP\" | awk '{print $2}'"
			print "check vm ip.."
			while True:
				status, output = commands.getstatusoutput(cmd) 
				if output != "value":
					break
				else:
					print "checking machine IP.."

			ip = output
			cmd = "vboxmanage showvminfo %s" % vm_name
			status, output = commands.getstatusoutput(cmd) 
			data = re.search(r'('+str+')', output) 
			if data: 
				print ip

		if data:
        		cmd = "VBoxManage guestproperty get %s \"/VirtualBox/GuestInfo/Net/0/V4/IP\" | awk '{print $2}'" % vm_name
        		status, output = commands.getstatusoutput(cmd)
			ip = output	

		return ip

	def check_runvm(self):
		cmd = 'VBoxManage list runningvms'
		status, output = commands.getstatusoutput(cmd)
		out = re.findall(r'\"(.*?)\"', output)
		return out
		

	def check_vm(self):
		cmd = 'VBoxManage list vms'
		status, output = commands.getstatusoutput(cmd)
		out = re.findall(r'\"(.*?)\"', output)
		return out

	def vm_status(self):
		cmd = ''
		status, output = commands.getstatusoutput(cmd)
		return output
			

	def start_vm(self, vm_name):
		cmd = "VBoxManage snapshot %s restore Snap1" % vm_name
		status, output = commands.getstatusoutput(cmd)

		cmd = "VBoxManage startvm %s" % vm_name
		status, output = commands.getstatusoutput(cmd)
		
		#time.sleep(60)
		
		#res_ip = self.get_machine_ip()
		#print res_ip

        def clone_Machine(self, source_type, clone_machine):
		source_machine = source_type + "-1"
		#os.system("mkdir %s / %s" % (self.spath, clone_machine))
                os.system("vboxmanage clonevm " + source_machine + " --name " + clone_machine + " --register")
                os.system("vboxmanage modifyvm " + clone_machine +" --macaddress1 auto")
		#share_folder_path = "%s/%s/" %(self.spath, clone_machine)
		#print share_folder_path
		#os.system("vboxmanage sharedfolder add \"" + clone_machine +"\" -name \"Task\" --automount -hostpath \""+ share_folder_path + "\"")
                os.system("vboxmanage startvm " + clone_machine + " --type gui")
                time.sleep(30)

                os.system("vboxmanage snapshot " + clone_machine + " take \"Snap1\" --pause")
                os.system("vboxmanage controlvm " + clone_machine + " savestate")            

        def write_Machine(self, source_type, clone_machine):
                config = configparser.ConfigParser()
                config.read("vmconfig.cfg")
                machine_list = config.get(source_type, 'machines')
		if len(machine_list) == 0:
                	config[source_type]['machines'] = clone_machine
		else:
                	config[source_type]['machines'] = machine_list +","+ clone_machine

                with open("vmconfig.cfg", 'w') as conffile:
                        config.write(conffile)                     

	def next_cloneMachine(self, machine_type):
		config = configparser.ConfigParser()
		config.read("vmconfig.cfg")
		machine_list = config.get(machine_type, 'machines')
		machine = machine_list.split(",")
		lth = len(machine)
		print lth
		m = re.match(r'('+machine_type+'.*)', machine_list)
		if not m:
			lth_num = int(lth) + int(1)
		if m:
			lth_num = int(lth) + int(2)

		machine_name = machine_type+"-"+str(lth_num)	
		return machine_name
		
	def start_machine(self, machine_name):
		status, output = commands.getstatusoutput("VBoxManage startvm %s --type=headless" % machine_name)
		time.sleep(20)
		


	def check_freemachine(self, machine_type):
		config = configparser.ConfigParser()
		config.read("vmconfig.cfg")
		machine_list = config.get(machine_type, 'machines')
		for machine in machine_list.split(','):
			status, output = commands.getstatusoutput("VBoxManage list runningvms")
			data = re.search(r''+machine+'', output)
			if not data:
				return machine
				break
			

	def start_process(self, source_type, file_name, file_type, file_path):
		free_machine = self.check_freemachine(source_type)
		print free_machine
		if free_machine:
			self.start_vm(free_machine)
		  	machine_ip = self.get_machine_ip(free_machine)
			print "IP %s" % machine_ip	

			cmd = "python client_windows.py %s %s %s %s" % (machine_ip, 60000, file_name, file_type) 
			status, output = commands.getstatusoutput(cmd)

			while not os.path.isfile("/var/tmp/%s" % file_name):
				time.sleep(5)
				print "process running in vm....."
				
			cmd = "VBoxManage debugvm \"%s\" dumpvmcore --filename %s/mem.dmp" % (free_machine, file_path)
			status, output = commands.getstatusoutput(cmd)
			print "status %s" % status
			if status != 0:
				cmd = "VBoxManage debugvm \"%s\" dumpguestcore --filename %s/mem.dmp" % (free_machine, file_path)
				print cmd
				status, output = commands.getstatusoutput(cmd)

			cmd = "VBoxManage controlvm %s poweroff" % free_machine
			status, output = commands.getstatusoutput(cmd)

			cmd = "rm -rf /var/tmp/%s1" % file_name
			status, output = commands.getstatusoutput(cmd)
			cmd = "rm -rf /var/tmp/%s" % file_name
			status, output = commands.getstatusoutput(cmd)

		if not free_machine:
			next_machine = self.next_cloneMachine(source_type)
			print "Machine %s" % next_machine
			self.clone_Machine(source_type, next_machine)
			self.write_Machine(source_type, next_machine)
			self.start_vm(next_machine)
		  	machine_ip = self.get_machine_ip(next_machine)
			print "IP %s" % machine_ip	

			cmd = "python client_windows.py %s %s %s %s" % (machine_ip, 60000, file_name, file_type) 
			status, output = commands.getstatusoutput(cmd)

			while not os.path.isfile("/var/tmp/%s" % file_name):
				time.sleep(5)
				print "process running in vm....."
			
			cmd = "VBoxManage debugvm \"%s\" dumpvmcore --filename %s/mem.dmp" % (next_machine, file_path)
			status, output = commands.getstatusoutput(cmd)
			print "status %s" % status
			if status != 0:
				cmd = "VBoxManage debugvm \"%s\" dumpguestcore --filename %s/mem.dmp" % (next_machine, file_path)
				status, output = commands.getstatusoutput(cmd)

			cmd = "VBoxManage controlvm %s poweroff" % next_machine
			status, output = commands.getstatusoutput(cmd)
			
			cmd = "rm -rf /var/tmp/%s1" % file_name
			status, output = commands.getstatusoutput(cmd)
			cmd = "rm -rf /var/tmp/%s" % file_name
			status, output = commands.getstatusoutput(cmd)
			
		
if __name__ == "__main__":
	res = virtualboxLib()
	print res.get_machine_ip("XP-2")	
	#print res.start_process("XP", "sample.pdf", "pdf", "task/report/d113cd13983a1633984f2a89ff1a868a/")

